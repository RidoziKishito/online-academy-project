{{!-- Admin Accounts List --}}
<div class="container py-4">
  <div class="card">
    <div class="card-header d-flex justify-content-between align-items-center">
      <h4 class="mb-0">Accounts</h4>
      <a class="btn btn-primary" href="/admin/accounts/create">
        <i class="bi bi-person-plus"></i> Create New
      </a>
    </div>
    <div class="card-body">
      <form method="get" action="/admin/accounts" class="row g-3 mb-3" id="filterForm">
        <div class="col-md-6">
          <label for="roleFilter" class="form-label">Filter by Role</label>
          <select class="form-select" id="roleFilter" name="role">
            <option value="">All Roles</option>
            {{#each roles}}
            <option value="{{this}}" {{#if (eq ../currentRole this)}}selected{{/if}}>{{this}}</option>
            {{/each}}
          </select>
        </div>
        <div class="col-md-3">
          <label for="verifiedFilter" class="form-label">Filter by Verified</label>
          <select class="form-select" id="verifiedFilter" name="is_verified">
            <option value="">All</option>
            <option value="true" {{#if (eq currentVerified 'true')}}selected{{/if}}>Verified</option>
            <option value="false" {{#if (eq currentVerified 'false')}}selected{{/if}}>Not Verified</option>
          </select>
        </div>
        <div class="col-md-3">
          <label for="bannedFilter" class="form-label">Filter by Banned</label>
          <select class="form-select" id="bannedFilter" name="is_banned">
            <option value="">All</option>
            <option value="true" {{#if (eq currentBanned 'true')}}selected{{/if}}>Banned</option>
            <option value="false" {{#if (eq currentBanned 'false')}}selected{{/if}}>Not Banned</option>
          </select>
        </div>
      </form>
    </div>
    <div class="card-body table-responsive pt-0">
      <table class="table table-striped">
        <thead>
          <tr>
            <th>ID</th>
            <th>Full name</th>
            <th>Email</th>
            <th>Role</th>
            <th>Verified</th>
            <th>Ban</th>
            <th class="text-end">Actions</th>
          </tr>
        </thead>
        <tbody id="accountsTableBody">
          {{#each users}}
          <tr>
            <td>{{this.user_id}}</td>
            <td>{{this.full_name}}</td>
            <td>{{this.email}}</td>
            <td>{{this.role}}</td>
            <td>
              {{#if this.is_verified}}
                <span class="badge bg-success">Yes</span>
              {{else}}
                <span class="badge bg-secondary">No</span>
              {{/if}}
            </td>
            <td>
              {{#if this.is_banned}}
                {{#if this.banned_until}}
                  <span class="badge bg-warning text-dark" title="Until {{format_date this.banned_until}}">Temp</span>
                {{else}}
                  <span class="badge bg-danger">Permanent</span>
                {{/if}}
              {{else}}
                <span class="badge bg-success">No</span>
              {{/if}}
            </td>
            <td class="text-end">
              {{#if (eq this.role 'student')}}
                <a class="btn btn-sm btn-outline-info" href="/student/public-profile?id={{this.user_id}}" title="View Profile">
                  <i class="bi bi-person"></i>
                </a>
              {{else if (eq this.role 'instructor')}}
                <a class="btn btn-sm btn-outline-info" href="/instructors/{{this.user_id}}" title="View Profile">
                  <i class="bi bi-person"></i>
                </a>
              {{/if}}
              <a class="btn btn-sm btn-outline-primary" href="/admin/accounts/edit/{{this.user_id}}" title="Edit">
                <i class="bi bi-pencil-square"></i>
              </a>
              {{#unless (eq this.role 'admin')}}
                {{#if this.is_banned}}
                  <button type="button" class="btn btn-sm btn-outline-success unban-btn" data-user-id="{{this.user_id}}" data-user-name="{{this.full_name}}">
                    <i class="bi bi-unlock"></i>
                  </button>
                {{else}}
                  <button type="button" class="btn btn-sm btn-outline-warning ban-btn" data-user-id="{{this.user_id}}" data-user-name="{{this.full_name}}">
                    <i class="bi bi-lock"></i>
                  </button>
                {{/if}}
              {{/unless}}
              <button type="button" class="btn btn-sm btn-danger delete-btn" data-user-id="{{this.user_id}}" data-user-name="{{this.full_name}}" {{#if this.is_verified}}disabled title="Cannot delete verified user"{{/if}}>
                <i class="bi bi-trash"></i>
              </button>
            </td>
          </tr>
          {{/each}}
        </tbody>
      </table>
    </div>
    {{#if pagination}}
    <div class="card-footer">
      <div class="d-flex justify-content-between align-items-center">
        <div class="text-muted">
          Showing {{users.length}} of {{pagination.totalItems}} accounts
        </div>
        <nav aria-label="Accounts pagination">
          <ul class="pagination pagination-sm mb-0" id="paginationControls">
            <li class="page-item {{#if (eq pagination.currentPage 1)}}disabled{{/if}}">
              <a class="page-link" href="#" data-page="{{subtract pagination.currentPage 1}}">Previous</a>
            </li>
            {{#each (generatePages pagination.currentPage pagination.totalPages)}}
              {{#if (eq this '...')}}
                <li class="page-item disabled"><span class="page-link">...</span></li>
              {{else}}
                <li class="page-item {{#if (eq this ../pagination.currentPage)}}active{{/if}}">
                  <a class="page-link" href="#" data-page="{{this}}">{{this}}</a>
                </li>
              {{/if}}
            {{/each}}
            <li class="page-item {{#if (eq pagination.currentPage pagination.totalPages)}}disabled{{/if}}">
              <a class="page-link" href="#" data-page="{{add pagination.currentPage 1}}">Next</a>
            </li>
          </ul>
        </nav>
      </div>
    </div>
    {{/if}}
  </div>
</div>

{{#fillContent 'js'}}
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
document.addEventListener('DOMContentLoaded', function() {
  let currentPage = {{pagination.currentPage}};

  function getProfileButton(role, userId) {
    if (role === 'student') {
      return `<a class="btn btn-sm btn-outline-info" href="/student/public-profile?id=${userId}" title="View Profile"><i class="bi bi-person"></i></a>`;
    } else if (role === 'instructor') {
      return `<a class="btn btn-sm btn-outline-info" href="/instructors/${userId}" title="View Profile"><i class="bi bi-person"></i></a>`;
    }
    return '';
  }

  function renderRows(users) {
    const tbody = document.getElementById('accountsTableBody');
    tbody.innerHTML = '';
    users.forEach(u => {
      const tr = document.createElement('tr');
      tr.innerHTML = `
        <td>${u.user_id}</td>
        <td>${u.full_name || ''}</td>
        <td>${u.email || ''}</td>
        <td>${u.role || ''}</td>
        <td>${u.is_verified ? '<span class="badge bg-success">Yes</span>' : '<span class="badge bg-secondary">No</span>'}</td>
        <td>${u.is_banned ? (u.banned_until ? '<span class="badge bg-warning text-dark">Temp</span>' : '<span class="badge bg-danger">Permanent</span>') : '<span class="badge bg-success">No</span>'}</td>
        <td class="text-end">
          ${getProfileButton(u.role, u.user_id)}
          <a class="btn btn-sm btn-outline-primary" href="/admin/accounts/edit/${u.user_id}" title="Edit">
            <i class="bi bi-pencil-square"></i>
          </a>
          ${u.role === 'admin' ? '' : (u.is_banned
            ? `<button type="button" class="btn btn-sm btn-outline-success unban-btn" data-user-id="${u.user_id}" data-user-name="${u.full_name || u.email}"><i class="bi bi-unlock"></i></button>`
            : `<button type="button" class="btn btn-sm btn-outline-warning ban-btn" data-user-id="${u.user_id}" data-user-name="${u.full_name || u.email}"><i class="bi bi-lock"></i></button>`)}
          <button type="button" class="btn btn-sm btn-danger delete-btn" data-user-id="${u.user_id}" data-user-name="${u.full_name || u.email}" ${u.is_verified ? 'disabled title="Cannot delete verified user"' : ''}>
            <i class="bi bi-trash"></i>
          </button>
        </td>`;
      tbody.appendChild(tr);
    });
    attachActionHandlers();
  }

  function generatePages(currentPage, totalPages) {
    const pages = [];
    const maxVisible = 7;
    if (totalPages <= maxVisible) {
      for (let i = 1; i <= totalPages; i++) pages.push(i);
    } else if (currentPage <= 4) {
      for (let i = 1; i <= 5; i++) pages.push(i);
      pages.push('...');
      pages.push(totalPages);
    } else if (currentPage >= totalPages - 3) {
      pages.push(1);
      pages.push('...');
      for (let i = totalPages - 4; i <= totalPages; i++) pages.push(i);
    } else {
      pages.push(1);
      pages.push('...');
      for (let i = currentPage - 1; i <= currentPage + 1; i++) pages.push(i);
      pages.push('...');
      pages.push(totalPages);
    }
    return pages;
  }

  function updatePagination(pagination) {
    const ul = document.getElementById('paginationControls');
    if (!ul) return;
    const pages = generatePages(pagination.currentPage, pagination.totalPages);
    let html = '';
    html += `<li class=\"page-item ${pagination.currentPage === 1 ? 'disabled' : ''}\"><a class=\"page-link\" href=\"#\" data-page=\"${pagination.currentPage - 1}\">Previous</a></li>`;
    pages.forEach(p => {
      if (p === '...') {
        html += '<li class="page-item disabled"><span class="page-link">...</span></li>';
      } else {
        html += `<li class=\"page-item ${p === pagination.currentPage ? 'active' : ''}\"><a class=\"page-link\" href=\"#\" data-page=\"${p}\">${p}</a></li>`;
      }
    });
    html += `<li class=\"page-item ${pagination.currentPage === pagination.totalPages ? 'disabled' : ''}\"><a class=\"page-link\" href=\"#\" data-page=\"${pagination.currentPage + 1}\">Next</a></li>`;
    ul.innerHTML = html;
    const showing = document.querySelector('.card-footer .text-muted');
    if (showing) showing.textContent = `Showing ${pagination.limit} of ${pagination.totalItems} accounts`;
    attachPaginationHandlers();
  }

  function loadUsers(page = 1) {
    const filterForm = document.getElementById('filterForm');
    const formData = new FormData(filterForm);
    const params = new URLSearchParams(formData);
    params.set('page', page);
    
    fetch(`/admin/accounts?${params.toString()}`, { headers: { 'Accept': 'application/json' }})
      .then(r => r.json())
      .then(data => {
        renderRows(data.users);
        updatePagination(data.pagination);
        currentPage = data.pagination.currentPage;
      })
      .catch(err => {
        console.error(err);
        Swal.fire({ icon: 'error', title: 'Error', text: 'Failed to load accounts.' });
      });
  }

  function attachPaginationHandlers() {
    document.querySelectorAll('#paginationControls .page-link').forEach(a => {
      a.addEventListener('click', function(e) {
        e.preventDefault();
        const p = parseInt(this.dataset.page);
        if (p && p > 0) loadUsers(p);
      });
    });
  }

  function attachActionHandlers() {
    document.querySelectorAll('.delete-btn').forEach(btn => {
      btn.addEventListener('click', function() {
        const userId = this.dataset.userId;
        const userName = this.dataset.userName || userId;
        Swal.fire({
          title: 'Delete Account?',
          html: `Are you sure you want to delete <strong>${userName}</strong>?`,
          icon: 'warning',
          showCancelButton: true,
          confirmButtonColor: '#d33',
          cancelButtonColor: '#3085d6',
          confirmButtonText: 'Yes, delete',
          cancelButtonText: 'Cancel'
        }).then(res => {
          if (res.isConfirmed) {
            fetch(`/admin/accounts/delete/${userId}`, { method: 'POST', headers: { 'Accept': 'application/json' }})
              .then(r => r.json())
              .then(data => {
                if (data.ok) {
                  Swal.fire({ icon: 'success', title: 'Deleted', timer: 1200, showConfirmButton: false });
                  loadUsers(currentPage);
                } else {
                  Swal.fire({ icon: 'error', title: 'Cannot delete', text: data.error || 'Delete failed' });
                }
              })
              .catch(() => Swal.fire({ icon: 'error', title: 'Error', text: 'Delete failed' }));
          }
        });
      });
    });

    // Ban handler
    document.querySelectorAll('.ban-btn').forEach(btn => {
      btn.addEventListener('click', async function() {
        const userId = this.dataset.userId;
        const userName = this.dataset.userName || userId;
        const { value: type } = await Swal.fire({
          title: `Ban ${userName}?`,
          input: 'select',
          inputOptions: {
            temporary: 'Temporary',
            permanent: 'Permanent'
          },
          inputPlaceholder: 'Select ban type',
          showCancelButton: true
        });
        if (!type) return;
        let payload = { type };
        if (type === 'temporary') {
          const { value: hours } = await Swal.fire({
            title: 'Duration (hours)',
            input: 'number',
            inputValue: 24,
            inputAttributes: { min: 1 },
            showCancelButton: true
          });
          if (!hours) return;
          payload.durationHours = hours;
        }
        const { value: reason } = await Swal.fire({
          title: 'Reason (optional)',
          input: 'text',
          inputPlaceholder: 'Enter reason',
          showCancelButton: true
        });
        payload.reason = reason || null;
        fetch(`/admin/accounts/ban/${userId}`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json', 'Accept': 'application/json' },
          body: JSON.stringify(payload)
        }).then(r => r.json()).then(data => {
          if (data.ok) {
            Swal.fire({ icon: 'success', title: 'Banned', timer: 1200, showConfirmButton: false });
            loadUsers(currentPage);
          } else {
            Swal.fire({ icon: 'error', title: 'Failed', text: data.error || 'Ban failed' });
          }
        }).catch(() => Swal.fire({ icon: 'error', title: 'Error', text: 'Ban failed' }));
      });
    });

    // Unban handler
    document.querySelectorAll('.unban-btn').forEach(btn => {
      btn.addEventListener('click', function() {
        const userId = this.dataset.userId;
        const userName = this.dataset.userName || userId;
        Swal.fire({
          title: 'Unban Account?',
          html: `Unban <strong>${userName}</strong>?`,
          icon: 'question',
          showCancelButton: true,
          confirmButtonText: 'Unban',
          cancelButtonText: 'Cancel'
        }).then(res => {
          if (res.isConfirmed) {
            fetch(`/admin/accounts/unban/${userId}`, { method: 'POST', headers: { 'Accept': 'application/json' }})
              .then(r => r.json())
              .then(data => {
                if (data.ok) {
                  Swal.fire({ icon: 'success', title: 'Unbanned', timer: 1200, showConfirmButton: false });
                  loadUsers(currentPage);
                } else {
                  Swal.fire({ icon: 'error', title: 'Failed', text: data.error || 'Unban failed' });
                }
              })
              .catch(() => Swal.fire({ icon: 'error', title: 'Error', text: 'Unban failed' }));
          }
        });
      });
    });
  }

  // Auto-submit form when filters change
  const filterSelects = document.querySelectorAll('#filterForm select');
  filterSelects.forEach(select => {
    select.addEventListener('change', function() {
      loadUsers(1); // Reset to page 1 when filters change
    });
  });

  // init
  attachPaginationHandlers();
  attachActionHandlers();
});
</script>
{{/fillContent}}