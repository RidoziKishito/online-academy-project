<form id="profileForm" action="" method="post">
  <div class="card">
    <div class="card-header">Profile</div>
    <div class="card-body">
      {{#if success}}
        <div class="alert alert-success">Profile updated successfully.</div>
      {{/if}}

      <div class="mb-3">
        <label for="txtName" class="form-label">Full name</label>
        <input type="text" class="form-control" id="txtName" name="fullName" autofocus value="{{authUser.full_name}}">
      </div>

      <div class="mb-3">
        <label for="txtEmail" class="form-label">Email</label>
        <input type="email" class="form-control" id="txtEmail" name="email" value="{{authUser.email}}">
      </div>

      <hr>
      <div class="mb-3">
        <label for="txtAvatar" class="form-label">Change Avatar</label>
        <div class="input-group">
          <input type="url" class="form-control" id="txtAvatar" name="avt_url"
                 placeholder="Enter image URL (https://...)" value="{{authUser.avatar_url}}">
          <button type="button" class="btn btn-outline-primary" id="btnCheckAvatar">
            <i class="bi bi-check-circle"></i>
          </button>
        </div>
        <div class="mt-3 text-center">
          <img id="avatarPreview" src="{{authUser.avatar_url}}" 
               alt="Avatar preview" class="img-thumbnail rounded-circle" 
               style="width: 120px; height: 120px; object-fit: cover; display: none;">
        </div>
      </div>
    </div>

    <div class="card-footer text-muted text-center">
      <button type="submit" class="btn btn-outline-success">
        <i class="bi bi-save"></i> Save
      </button>
    </div>
  </div>
</form>

<script>
document.addEventListener('DOMContentLoaded', function () {
  const form = document.getElementById('profileForm');
  const btnCheck = document.getElementById('btnCheckAvatar');
  const input = document.getElementById('txtAvatar');
  const preview = document.getElementById('avatarPreview');

  if (!form) return;

  // Email format check
  function isValidEmail(email) {
    return /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email);
  }

  // Show alert with SweetAlert or fallback
  function showAlert(icon, title, text) {
    if (window.Swal)
      Swal.fire({ icon, title, text });
    else
      alert(`${title}\n${text}`);
  }

  // Preview avatar
  btnCheck.addEventListener('click', () => {
    const url = input.value.trim();
    if (!url) {
      showAlert('warning', 'Missing Image URL', 'Please enter an image URL.');
      return;
    }

    const img = new Image();
    img.onload = () => {
      preview.src = url;
      preview.style.display = 'inline-block';
    };
    img.onerror = () => {
      preview.style.display = 'none';
      showAlert('error', 'Invalid Image', 'The provided link is invalid or inaccessible.');
    };
    img.src = url;
  });

  // Validate and submit via AJAX
  form.addEventListener('submit', async function (e) {
    e.preventDefault(); // Prevent page reload

    const fullName = document.getElementById('txtName').value.trim();
    const email = document.getElementById('txtEmail').value.trim();
    const avt_url = document.getElementById('txtAvatar').value.trim();

    // Validate input
    if (!fullName || !email) {
      showAlert('error', 'Missing Information', 'Full name and email are required.');
      return;
    }

    if (!isValidEmail(email)) {
      showAlert('error', 'Invalid Email', 'Please enter a valid email address.');
      return;
    }

    try {
      const res = await fetch('/account/profile', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ fullName, email, avt_url })
      });

      const result = await res.json().catch(() => ({}));

      if (res.ok && result.success) {
        showAlert('success', 'Profile Updated', 'Your profile information has been saved successfully.');
      } else {
        showAlert('error', 'Update Failed', result.message || 'Unable to save profile. Please try again.');
      }
    } catch {
      showAlert('error', 'Connection Error', 'Failed to communicate with the server.');
    }
  });
});
</script>
